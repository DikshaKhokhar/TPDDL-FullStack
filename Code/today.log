var a;
undefined
typeof(a);
"undefined"
a=100;
100
typeof(a);
"number"
a=100.20;
100.2
typeof(a);
"number"
a=1;
1
a=10000000;
10000000
typeof(a);
"number"
a=100/0;
Infinity
a;
Infinity
typeof(a);
"number"
a=100;
100
var b = "100";
undefined
typeof(a);
"number"
typeof(b);
"string"
a + b;
"100100"
a + parseInt(b);
200
a - b;
0
a * b;
10000
a/b;
1
2**3.;
8
2**3;
8
a;
100
b;
"100"
b = "Amit";
"Amit"
a;
100
b;
"Amit"
a  + b;
"100Amit"
a- b;
NaN
typeof(a-b);
"number"
var c =  a- b;
undefined
c;
NaN
isNaN(c)?0:c;
0
c;
NaN
c=100;
100
isNaN(c)?0:c;
100
a=100/0;
Infinity
a;
Infinity
isFinite(a)?a:0;
0
var a = "Amit":
VM1488:1 Uncaught SyntaxError: Unexpected token :
var a = "Amit";
undefined
typeof(a);
"string"
a='Amit';
"Amit"
typeof(a);
"string"
a='A';
"A"
typeof(a);
"string"
a="Hello \n this is multiline\n string";
"Hello 
 this is multiline
 string"
a=`jglkfdjgjlkdfjgkldfjgjdflkgd
gdjfkjgh
gdf
gfd
gdf
gdf
gf
fdgg
d
`;
"jglkfdjgjlkdfjgkldfjgjdflkgd
gdjfkjgh
gdf
gfd
gdf
gdf
gf
fdgg
d
"
typeof(a);
"string"
a;
"jglkfdjgjlkdfjgkldfjgjdflkgd
gdjfkjgh
gdf
gfd
gdf
gdf
gf
fdgg
d
"
var a= true;
undefined
var b = true;
undefined
typeof(a);
"boolean"
a + b;
2
var obj = {};
undefined
typeof(obj);
"object"
obj.id =1001;
1001
obj;
{id: 1001}
obj.name= "Amit";
"Amit"
obj;
{id: 1001, name: "Amit"}
typeof(obj);
"object"
obj instanceof Object;
true
typeof(obj.id);
"number"
typeof(obj.name);
"string"
typeof(Object);
"function"
console.dir(Object);
VM3095:1 ƒ Object()arguments: (...)assign: ƒ assign()caller: (...)create: ƒ create()defineProperties: ƒ defineProperties()defineProperty: ƒ defineProperty()entries: ƒ entries()freeze: ƒ freeze()getOwnPropertyDescriptor: ƒ getOwnPropertyDescriptor()getOwnPropertyDescriptors: ƒ getOwnPropertyDescriptors()getOwnPropertyNames: ƒ getOwnPropertyNames()getOwnPropertySymbols: ƒ getOwnPropertySymbols()getPrototypeOf: ƒ getPrototypeOf()is: ƒ is()isExtensible: ƒ isExtensible()isFrozen: ƒ isFrozen()isSealed: ƒ isSealed()keys: ƒ keys()length: 1name: "Object"preventExtensions: ƒ preventExtensions()prototype: {constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}seal: ƒ seal()setPrototypeOf: ƒ setPrototypeOf()values: ƒ values()__proto__: ƒ ()apply: ƒ apply()arguments: (...)bind: ƒ bind()call: ƒ call()caller: (...)constructor: ƒ Function()length: 0name: ""toString: ƒ toString()Symbol(Symbol.hasInstance): ƒ [Symbol.hasInstance]()get arguments: ƒ ()set arguments: ƒ ()get caller: ƒ ()set caller: ƒ ()__proto__: Object[[FunctionLocation]]: <unknown>[[Scopes]]: Scopes[0][[Scopes]]: Scopes[0]
undefined
var obj = {id:1001, name:'Ram',salary:99999};
undefined
obj.id;
1001
obj.bonus = 12000;
12000
obj;
{id: 1001, name: "Ram", salary: 99999, bonus: 12000}
delete obj.id;
true
obj;
{name: "Ram", salary: 99999, bonus: 12000}
obj = null;
null
typeof(obj);
"object"
var a = {};
undefined
typeof(a);
"object"
a=100;
100
typeof(a);
"number"
a=0;
0
typeof(a);
"number"
a= {};
{}
typeof(a);
"object"
a=null;
null
typeof(a);
"object"
var ram = {id:1001,name:'Ram',salary:99999};
undefined
ram;
{id: 1001, name: "Ram", salary: 99999}
var math = {
sin:function(){
console.log("I am Sin ");
},
cos(){
console.log("I am Cos ");
}
}
undefined
typeof(math);
"object"
math.sin();
VM4331:3 I am Sin 
undefined
math.cos();
VM4331:6 I am Cos 
undefined
var e = {id:[1001,1002], address:[{city:'Delhi',pin:11007}]};
undefined
e.id[1];
1002
e.address[0].city;
"Delhi"
var w = [10,20,"Amit",true,[200,666],{id:1001}];
undefined
typeof(w);
"object"
w instanceof Array;
true
typeof(Array);
"function"
w instanceof Object;
true
var w1 = new Array();
undefined
w1;
[]
var w1 = new Array(10,20,30,40,50);
undefined
w1;
(5) [10, 20, 30, 40, 50]
typeof(w1);
"object"
w1 instanceof Array;
true
var m = 100;
undefined
typeof(m);
"number"
++m;
101
var m1 = new Number(100);
undefined
typeof(m1);
"object"
m1 instanceof Number;
true
m1 instanceof Object;
true
var p = "AMIT";
undefined
typeof(p);
"string"
var g = new String("Hello");
undefined
typeof(g);
"object"
g.charAt(0);
"H"
m;
101
m1;
Number {100}
var t1 = ++m1;
undefined
t1;
101
typeof(t1);
"number"
function add(){
console.log("I am Add ");
}
undefined
typeof(add);
"function"
add();
VM6191:2 I am Add 
undefined
add(10,20);
VM6191:2 I am Add 
undefined
add(10,20,100,200,4400, "Amit", true,[10909,200]);
VM6191:2 I am Add 
undefined
console.dir(add);
VM6642:1 ƒ add()arguments: nullcaller: nulllength: 0name: "add"prototype: {constructor: ƒ}__proto__: ƒ ()[[FunctionLocation]]: VM6191:1[[Scopes]]: Scopes[1]
undefined
function add(){
console.log("I am Add ", arguments.length);
}
undefined
add();
VM6786:2 I am Add  0
undefined
add(10,20);
VM6786:2 I am Add  2
undefined
add(10,20,100,200,4400, "Amit", true,[10909,200]);
VM6786:2 I am Add  8
undefined
function show(){
console.log("K is "+k);
if(10>2){
var k = 1000;
console.log("Inside If K is "+k);
}
console.log("End K is "+k);
}
undefined
show();
VM7398:2 K is undefined
VM7398:5 Inside If K is 1000
VM7398:7 End K is 1000
undefined
function show(){
console.log("K is "+k);
if(10>2){
let k = 1000;
console.log("Inside If K is "+k);
}
console.log("End K is "+k);
}
undefined
show();
VM7439:2 Uncaught ReferenceError: k is not defined
    at show (<anonymous>:2:21)
    at <anonymous>:1:1
show @ VM7439:2
(anonymous) @ VM7455:1
function show(){
//console.log("K is "+k);
if(10>2){
 k = 1000;
console.log("Inside If K is "+k);
}
console.log("End K is "+k);
}
undefined
show();
VM7494:5 Inside If K is 1000
VM7494:7 End K is 1000
undefined
k;
1000
function add(){
//console.log("I am Add ", arguments.length);
var sum = 0;
for(let i = 0 ; i<arguments.length; i++){
sum+=arguments[i];
}
return sum;
}
undefined
add();
0
add(10,20);
30
add(1,2,3,4,5,6,7,8,9,10);
55
add(1,2,3,4,5,6,7,8,"9",10);
"36910"
function add(){
//console.log("I am Add ", arguments.length);
var sum = 0;
for(let i = 0 ; i<arguments.length; i++){
sum+=parseInt(arguments[i]);
}
return sum;
}
undefined
add(1,2,3,4,5,6,7,8,"9",10);
55
add(1,2,3,4,5,"ten",7,8,"9",10);
NaN
function add(){
//console.log("I am Add ", arguments.length);
var sum = 0;
for(let i = 0 ; i<arguments.length; i++){
sum+=isNaN(parseInt(arguments[i]))?0:parseInt(arguments[i]);
}
return sum;
}
undefined
add(1,2,3,4,5,"ten",7,8,"9",10);
49
function getNumber(){
return 10;
}
undefined
add(1,2,3,4,5,"ten",7,8,"9",10,getNumber);
49
parseInt(getNumber);
NaN
parseInt(getNumber());
10
function add(){
//console.log("I am Add ", arguments.length);
var sum = 0;
for(let i = 0 ; i<arguments.length; i++){
if(typeof arguments[i]==="function"){
arguments[i] = arguments[i]();
}
sum+=isNaN(parseInt(arguments[i]))?0:parseInt(arguments[i]);
}
return sum;
}
undefined
add(1,2,3,4,5,"ten",7,8,"9",10,getNumber);
59
add;
ƒ add(){
//console.log("I am Add ", arguments.length);
var sum = 0;
for(let i = 0 ; i<arguments.length; i++){
if(typeof arguments[i]==="function"){
arguments[i] = arguments[i]();
}
sum+=isNaN(parseInt(…
var e = add;
undefined
typeof(e);
"function"
e;
ƒ add(){
//console.log("I am Add ", arguments.length);
var sum = 0;
for(let i = 0 ; i<arguments.length; i++){
if(typeof arguments[i]==="function"){
arguments[i] = arguments[i]();
}
sum+=isNaN(parseInt(…
e();
0
e(10,20);
30
